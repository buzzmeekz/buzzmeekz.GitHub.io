<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-04T21:45:35-03:00</updated><id>http://localhost:4000/</id><title type="html">Miguel Tavares</title><subtitle>developer journal</subtitle><author><name>Miguel Tavares</name></author><entry><title type="html">Flexbox</title><link href="http://localhost:4000/2017/09/04/Flexbox.html" rel="alternate" type="text/html" title="Flexbox" /><published>2017-09-04T00:00:00-03:00</published><updated>2017-09-04T00:00:00-03:00</updated><id>http://localhost:4000/2017/09/04/Flexbox</id><content type="html" xml:base="http://localhost:4000/2017/09/04/Flexbox.html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes&quot;&gt;Flexbox&lt;/a&gt; is a great way to make a site responsive. The size, spacing and positioning of the boxes can be adjusted according to the screen size.&lt;/p&gt;

&lt;p&gt;This is &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;tutorial&lt;/a&gt; by CSS-Tricks gives a good overview of how to implement this CSS class and its attributes.&lt;/p&gt;

&lt;p&gt;Adding the property &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; to the parent element makes it a flex container. All underlying children are automatically flex items.&lt;/p&gt;

&lt;h2 id=&quot;properties-of-the-flex-container&quot;&gt;Properties of the flex container&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;flex-direction&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;row&lt;/code&gt; (default): left to right.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;row-reverse&lt;/code&gt;: right to left.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt;: top to bottom.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;column-reverse&lt;/code&gt;: bottom to top.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex-wrap&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap-reverse&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nowrap&lt;/code&gt; (default)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex-flow&lt;/strong&gt;: combines both the flex-direction and flex-wrap in a single property.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;justify-content&lt;/strong&gt;: horizontal alignment of the elements.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt;: to the left.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-end&lt;/code&gt;: to the right.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;: in the center.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-between&lt;/code&gt;: evenly distributed with first element at the start and last element at the end.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-around&lt;/code&gt;: evenly distributed with equal space around them.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-evenly&lt;/code&gt;: spacing between any two elements (and the space to the edges) is equal.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;align-items&lt;/strong&gt;: vertical alignment of the elements.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt;: at the top.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-end&lt;/code&gt;: at the bottom.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;: centered.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baseline&lt;/code&gt;: baseline of the elements are aligned.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stretch&lt;/code&gt;: stretch vertically to fill the container.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;align-content&lt;/strong&gt;: vertical alignment when there are multiple rows.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-start&lt;/code&gt;: to the start of the container.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex-end&lt;/code&gt;: to the end of the container.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;: to the center of the container.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-between&lt;/code&gt;: evenly distributed.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;space-around&lt;/code&gt;: evenly distributed with equal space around each line.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stretch&lt;/code&gt; (default): stretch to take up the remaining space.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;properties-of-the-flex-item&quot;&gt;Properties of the flex item&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;order&lt;/strong&gt;: change the order of the items.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex-grow&lt;/strong&gt;: allows item to grow by setting a relative number.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex-shrink&lt;/strong&gt;: allows item to shrink.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex-basis&lt;/strong&gt;: default size of an item before the remaining space is distributed. Can be set in percentage, rem, etc. If it is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; it looks at the width and height property of the item.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;flex&lt;/strong&gt;: combines &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-grow&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-shrink&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-basis&lt;/code&gt;. Default is &lt;code class=&quot;highlighter-rouge&quot;&gt;0 1 auto&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;align-self&lt;/strong&gt;: vertically align an individual item.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Following the CSS-Tricks tutorial I created some examples using the flexbox class.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;jLJdjq&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;buzzmeekz&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Flexbox Examples&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/buzzmeekz/pen/jLJdjq/&quot;&gt;Flexbox Examples&lt;/a&gt; by Miguel Tavares (&lt;a href=&quot;https://codepen.io/buzzmeekz&quot;&gt;@buzzmeekz&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Also check out this cool &lt;a href=&quot;http://flexboxfroggy.com/&quot;&gt;game&lt;/a&gt; where you have to move frogs around a screen to help you learn the flexbox basics.&lt;/p&gt;</content><author><name>Miguel Tavares</name></author><category term="flexbox" /><category term="html" /><category term="css" /><summary type="html">Flexbox is a great way to make a site responsive. The size, spacing and positioning of the boxes can be adjusted according to the screen size. This is tutorial by CSS-Tricks gives a good overview of how to implement this CSS class and its attributes. Adding the property display: flex to the parent element makes it a flex container. All underlying children are automatically flex items. Properties of the flex container flex-direction row (default): left to right. row-reverse: right to left. column: top to bottom. column-reverse: bottom to top. flex-wrap wrap wrap-reverse nowrap (default) flex-flow: combines both the flex-direction and flex-wrap in a single property. justify-content: horizontal alignment of the elements. flex-start: to the left. flex-end: to the right. center: in the center. space-between: evenly distributed with first element at the start and last element at the end. space-around: evenly distributed with equal space around them. space-evenly: spacing between any two elements (and the space to the edges) is equal. align-items: vertical alignment of the elements. flex-start: at the top. flex-end: at the bottom. center: centered. baseline: baseline of the elements are aligned. stretch: stretch vertically to fill the container. align-content: vertical alignment when there are multiple rows. flex-start: to the start of the container. flex-end: to the end of the container. center: to the center of the container. space-between: evenly distributed. space-around: evenly distributed with equal space around each line. stretch (default): stretch to take up the remaining space. Properties of the flex item order: change the order of the items. flex-grow: allows item to grow by setting a relative number. flex-shrink: allows item to shrink. flex-basis: default size of an item before the remaining space is distributed. Can be set in percentage, rem, etc. If it is set to auto it looks at the width and height property of the item. flex: combines flex-grow, flex-shrink and flex-basis. Default is 0 1 auto. align-self: vertically align an individual item. Examples Following the CSS-Tricks tutorial I created some examples using the flexbox class. See the Pen Flexbox Examples by Miguel Tavares (@buzzmeekz) on CodePen. Also check out this cool game where you have to move frogs around a screen to help you learn the flexbox basics.</summary></entry><entry><title type="html">Bootstrap Grid System</title><link href="http://localhost:4000/2017/09/01/Bootstrap-Grid-System.html" rel="alternate" type="text/html" title="Bootstrap Grid System" /><published>2017-09-01T00:00:00-03:00</published><updated>2017-09-01T00:00:00-03:00</updated><id>http://localhost:4000/2017/09/01/Bootstrap-Grid-System</id><content type="html" xml:base="http://localhost:4000/2017/09/01/Bootstrap-Grid-System.html">&lt;p&gt;Make a site responsive using the Bootstrap &lt;a href=&quot;https://getbootstrap.com/docs/3.3/css/#grid&quot;&gt;grid system&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make a &lt;strong&gt;container&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a &lt;strong&gt;row&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Define the column space for each box. There are &lt;strong&gt;12 columns&lt;/strong&gt; in each row.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means you can make a row with 4 boxes like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
        &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt;
            &amp;lt;div class=&quot;card&quot;&amp;gt;
                &amp;lt;h3&amp;gt;Box 1&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt;
            &amp;lt;div class=&quot;card&quot;&amp;gt;
                &amp;lt;h3&amp;gt;Box 2&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt;
            &amp;lt;div class=&quot;card&quot;&amp;gt;
                &amp;lt;h3&amp;gt;Box 3&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt;
            &amp;lt;div class=&quot;card&quot;&amp;gt;
                &amp;lt;h3&amp;gt;Box 4&amp;lt;/h3&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The classes to set the column width are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;col-xs-12&lt;/strong&gt;: on an extra small screen device (phone) the column width will be equal to the row width, i.e. all boxes will be below one another in a single column.
&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_DF3E6D2DF13A1AA1C63387C5F183F8D88C261ACC49255C9841C23B8F107E7FE6_1504274678701_Screenshot+2017-09-01+11.03.50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;col-sm-6&lt;/strong&gt;: on a small device (tablet) the column width will be 6, so there are 2 columns with 2 boxes each.
&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_DF3E6D2DF13A1AA1C63387C5F183F8D88C261ACC49255C9841C23B8F107E7FE6_1504274703571_Screenshot+2017-09-01+11.04.02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;col-md-3&lt;/strong&gt;: on a medium device (laptop or desktop) the width will be 3, showing the boxes on a single row.
&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_DF3E6D2DF13A1AA1C63387C5F183F8D88C261ACC49255C9841C23B8F107E7FE6_1504274718642_Screenshot+2017-09-01+11.04.10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can test this here: &lt;a href=&quot;https://codepen.io/buzzmeekz/full/mMvqey/&quot;&gt;https://codepen.io/buzzmeekz/full/mMvqey/&lt;/a&gt;&lt;/p&gt;</content><author><name>Miguel Tavares</name></author><category term="bootstrap" /><category term="html" /><category term="css" /><summary type="html">Make a site responsive using the Bootstrap grid system: Make a container: &amp;lt;div class=&quot;container&quot;&amp;gt;&amp;lt;/div&amp;gt;. Add a row: &amp;lt;div class=&quot;row&quot;&amp;gt;&amp;lt;/div&amp;gt;. Define the column space for each box. There are 12 columns in each row. This means you can make a row with 4 boxes like this: &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;div class=&quot;row&quot;&amp;gt; &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt; &amp;lt;div class=&quot;card&quot;&amp;gt; &amp;lt;h3&amp;gt;Box 1&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt; &amp;lt;div class=&quot;card&quot;&amp;gt; &amp;lt;h3&amp;gt;Box 2&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt; &amp;lt;div class=&quot;card&quot;&amp;gt; &amp;lt;h3&amp;gt;Box 3&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;col-xs-12 col-sm-6 col-md-3&quot;&amp;gt; &amp;lt;div class=&quot;card&quot;&amp;gt; &amp;lt;h3&amp;gt;Box 4&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; The classes to set the column width are: col-xs-12: on an extra small screen device (phone) the column width will be equal to the row width, i.e. all boxes will be below one another in a single column. col-sm-6: on a small device (tablet) the column width will be 6, so there are 2 columns with 2 boxes each. col-md-3: on a medium device (laptop or desktop) the width will be 3, showing the boxes on a single row. You can test this here: https://codepen.io/buzzmeekz/full/mMvqey/</summary></entry><entry><title type="html">Jekyll</title><link href="http://localhost:4000/2017/08/31/Jekyll.html" rel="alternate" type="text/html" title="Jekyll" /><published>2017-08-31T00:00:00-03:00</published><updated>2017-08-31T00:00:00-03:00</updated><id>http://localhost:4000/2017/08/31/Jekyll</id><content type="html" xml:base="http://localhost:4000/2017/08/31/Jekyll.html">&lt;p&gt;Ok, I have to admit it took me some time to set up this site using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. The installation was actually pretty straightforward. But then you’re stuck with a generic blog template and have no idea how to customize it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing a new theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being used to WordPress I mistakenly thought that I just would have to import some theme zip file, adjust some settings in the config file and commit the changes. Would that it were so simple!&lt;/p&gt;

&lt;p&gt;Some themes can be installed using a ruby gem. I tried doing this with several themes on this &lt;a href=&quot;https://github.com/planetjekyll/awesome-jekyll-themes&quot;&gt;list&lt;/a&gt;, but with little success. Another option that was suggested in &lt;a href=&quot;https://stackoverflow.com/questions/31327045/switch-theme-in-an-existing-jekyll-installation&quot;&gt;Stack Overflow&lt;/a&gt; involved making a branch of the existing git repository, pulling in the new theme and then merging the changes. This seems like the correct way of handling a theme change, but a bit complex for someone just getting started with Git.&lt;/p&gt;

&lt;p&gt;In the end I just found a &lt;a href=&quot;https://github.com/fongandrew/hydeout&quot;&gt;theme&lt;/a&gt; I liked, cloned it to a local directory and started customising it.&lt;/p&gt;

&lt;p&gt;Because I had cloned the repo, it was still linked to the original remote of the theme developer. To publish it with GitHub Pages I needed to link it to my own remote. I’m sure there’s a better way to do this, but I just made a new directory copied all the files into it and initiated a new git repo. Then I added my own remote to publish the site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why did I choose Jekyll to build my site?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main reason I initially became interested in Jekyll is that it allows you to build a minimalist static site. Even though this proved to be harder than I thought, it was a good learning process.&lt;/p&gt;

&lt;p&gt;For an aspiring developer Jekyll is actually the perfect way to build a site. It forces you to use essential developer tools like the command line, Git and a (markdown) text editor.&lt;/p&gt;</content><author><name>Miguel Tavares</name></author><category term="jekyll" /><category term="git" /><category term="github" /><summary type="html">Ok, I have to admit it took me some time to set up this site using Jekyll. The installation was actually pretty straightforward. But then you’re stuck with a generic blog template and have no idea how to customize it. Installing a new theme Being used to WordPress I mistakenly thought that I just would have to import some theme zip file, adjust some settings in the config file and commit the changes. Would that it were so simple! Some themes can be installed using a ruby gem. I tried doing this with several themes on this list, but with little success. Another option that was suggested in Stack Overflow involved making a branch of the existing git repository, pulling in the new theme and then merging the changes. This seems like the correct way of handling a theme change, but a bit complex for someone just getting started with Git. In the end I just found a theme I liked, cloned it to a local directory and started customising it. Because I had cloned the repo, it was still linked to the original remote of the theme developer. To publish it with GitHub Pages I needed to link it to my own remote. I’m sure there’s a better way to do this, but I just made a new directory copied all the files into it and initiated a new git repo. Then I added my own remote to publish the site. Why did I choose Jekyll to build my site? The main reason I initially became interested in Jekyll is that it allows you to build a minimalist static site. Even though this proved to be harder than I thought, it was a good learning process. For an aspiring developer Jekyll is actually the perfect way to build a site. It forces you to use essential developer tools like the command line, Git and a (markdown) text editor.</summary></entry><entry><title type="html">Google Home Page</title><link href="http://localhost:4000/2017/08/30/Google-Home-Page.html" rel="alternate" type="text/html" title="Google Home Page" /><published>2017-08-30T03:15:16-03:00</published><updated>2017-08-30T03:15:16-03:00</updated><id>http://localhost:4000/2017/08/30/Google-Home-Page</id><content type="html" xml:base="http://localhost:4000/2017/08/30/Google-Home-Page.html">&lt;p&gt;As part of the &lt;a href=&quot;https://www.theodinproject.com/courses/web-development-101/lessons/html-css&quot;&gt;Odin Project&lt;/a&gt; curriculum I had to replicate the Google home page using html and css. You can see the result &lt;a href=&quot;http://migueltavar.es/google-homepage/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most difficult part was figuring out how to add the top and bottom navigation bars. There are many different ways to do this, for example using the html5 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag. I just used a regular unordered list &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; items. Then I removed all the styling in css.&lt;/p&gt;

&lt;p&gt;This video was really helpful:&lt;/p&gt;

&lt;div class=&quot;video-responsive&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_ovlvYH782c?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Miguel Tavares</name></author><category term="odin project" /><category term="courses" /><category term="html" /><category term="css" /><category term="video" /><summary type="html">As part of the Odin Project curriculum I had to replicate the Google home page using html and css. You can see the result here. The most difficult part was figuring out how to add the top and bottom navigation bars. There are many different ways to do this, for example using the html5 &amp;lt;nav&amp;gt; tag. I just used a regular unordered list &amp;lt;ul&amp;gt; with &amp;lt;li&amp;gt; items. Then I removed all the styling in css. This video was really helpful:</summary></entry><entry><title type="html">Document</title><link href="http://localhost:4000/2017/08/25/Document.html" rel="alternate" type="text/html" title="Document" /><published>2017-08-25T08:15:16-03:00</published><updated>2017-08-25T08:15:16-03:00</updated><id>http://localhost:4000/2017/08/25/Document</id><content type="html" xml:base="http://localhost:4000/2017/08/25/Document.html">&lt;p&gt;In the following posts I will &lt;a href=&quot;https://www.youtube.com/watch?v=RVKofRN1dyI&quot;&gt;document&lt;/a&gt; my journey towards becoming a developer. The main objective is to be able to reference my learning trajectory and get an overview of where I am and how I got there.&lt;/p&gt;

&lt;p&gt;So let me start at the beginning.&lt;/p&gt;

&lt;h2 id=&quot;when-did-i-get-the-idea-to-become-a-developer&quot;&gt;When did I get the idea to become a developer?&lt;/h2&gt;

&lt;p&gt;Although I am working as a support agent for a &lt;a href=&quot;http://appmachine.com&quot;&gt;software company&lt;/a&gt;, I did not aspire to become a developer. I enjoyed technology, but always fancied myself more of a consumer than a creator. Developers were like these mythical creatures, able to solve impossibly abstract problems. Joining their ranks did not seem like a real option to me.&lt;/p&gt;

&lt;p&gt;This changed when I read an &lt;a href=&quot;https://sivers.org/prog&quot;&gt;article&lt;/a&gt; by Derek Sivers. In a world ruled by technology, he said, you should at least know the basics of how that technology works. TL;DR everyone should learn programming!&lt;/p&gt;

&lt;p&gt;These are the main sites that I have used so far to learn how to code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/&quot;&gt;FreeCodeCamp&lt;/a&gt;: very easy to get started and I liked that from the beginning you learn by solving little code challenges. The difficulty level does ramp up significantly though. In particular the projects you have to do by yourself can be hard, because you go from a guided learning process to suddenly having to build something on your own from scratch.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;: best online courses I found so far. Really nice layout and well thought out learning process. I did buy the Pro version to get access to the quizzes and projects. They are currently updating the courses, so some older courses are a bit outdated. This is where I first learned Ruby.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://udacity.com&quot;&gt;Udacity&lt;/a&gt;: not quite as good as Codecademy, but good to reference for specific doubts I had about HTML, CSS and JavaScript.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theodinproject.com/&quot;&gt;The Odin Project&lt;/a&gt;: currently I am going through this open source curriculum. Nice thing about this course is that you’re not coding in a closed environment and are forced to learn development tools from the beginning, like the command line and Git. They also reference a lot of great online resources on each subject that I’m bookmarking for later use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;The online courses really helped me make up my mind that this the path I want to pursue and gave me basic knowledge of the full development stack. Still I wanted something that would help accelerate my learning. So after doing some research I decided…&lt;/p&gt;

&lt;p&gt;…to join the &lt;a href=&quot;https://www.lewagon.com&quot;&gt;Le Wagon&lt;/a&gt; developer bootcamp!&lt;/p&gt;

&lt;p&gt;I will be starting at the end of September in the Lisbon batch. Really excited :)&lt;/p&gt;</content><author><name>Miguel Tavares</name></author><category term="bootcamp" /><category term="courses" /><summary type="html">In the following posts I will document my journey towards becoming a developer. The main objective is to be able to reference my learning trajectory and get an overview of where I am and how I got there. So let me start at the beginning. When did I get the idea to become a developer? Although I am working as a support agent for a software company, I did not aspire to become a developer. I enjoyed technology, but always fancied myself more of a consumer than a creator. Developers were like these mythical creatures, able to solve impossibly abstract problems. Joining their ranks did not seem like a real option to me. This changed when I read an article by Derek Sivers. In a world ruled by technology, he said, you should at least know the basics of how that technology works. TL;DR everyone should learn programming! These are the main sites that I have used so far to learn how to code: FreeCodeCamp: very easy to get started and I liked that from the beginning you learn by solving little code challenges. The difficulty level does ramp up significantly though. In particular the projects you have to do by yourself can be hard, because you go from a guided learning process to suddenly having to build something on your own from scratch. Codecademy: best online courses I found so far. Really nice layout and well thought out learning process. I did buy the Pro version to get access to the quizzes and projects. They are currently updating the courses, so some older courses are a bit outdated. This is where I first learned Ruby. Udacity: not quite as good as Codecademy, but good to reference for specific doubts I had about HTML, CSS and JavaScript. The Odin Project: currently I am going through this open source curriculum. Nice thing about this course is that you’re not coding in a closed environment and are forced to learn development tools from the beginning, like the command line and Git. They also reference a lot of great online resources on each subject that I’m bookmarking for later use. What’s next? The online courses really helped me make up my mind that this the path I want to pursue and gave me basic knowledge of the full development stack. Still I wanted something that would help accelerate my learning. So after doing some research I decided… …to join the Le Wagon developer bootcamp! I will be starting at the end of September in the Lisbon batch. Really excited :)</summary></entry></feed>